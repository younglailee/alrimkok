<?php/** * 사용자모드 > 자유게시판 모듈 클래스 * @file    NoticeUser.class.php * @author  Alpha-Edu * @package board */namespace sFramework;use function print_r;class QnaUser extends Qna{    protected function setModuleConfig()    {        parent::setModuleConfig();    }    protected function checkWriterSession()    {        $ss_bd_writer_name = Session::getSession('ss_bd_writer_name');        $ss_bd_writer_tel = Session::getSession('ss_bd_writer_tel');        if ($ss_bd_writer_name && $ss_bd_writer_tel) {            return true;        } else {            return false;        }    }    public function checkListAuth()    {        // 인증 확인        return $this->checkWriterSession();    }    public function checkViewAuth($data)    {        $reg_id = $data['reg_id'];        global $member;        if ($member['mb_id'] == $reg_id) {            return true;        }        return false;    }    public function checkWriteAuth()    {        global $member;        if ($member['mb_id']) {            return true;        }        return false;    }    public function checkUpdateAuth($uid)    {        global $member;        if ($member['mb_id']) {            return true;        }        return false;    }    protected function convertInsert($arr)    {        $arr = parent::convertInsert($arr);        global $member;        // qna 등록 시 작성자이름, 전화번호 가져오기 20220718 박금삼        $arr['bd_writer_name'] = $member['mb_name'];        $arr['bd_writer_tel'] = $member['mb_tel'];        //$arr['bd_writer_name'] = Session::getSession('ss_bd_writer_name');        //$arr['bd_writer_tel'] = Session::getSession('ss_bd_writer_tel');        $arr['bd_state'] = 'W';        $arr['bd_is_secret'] = 'Y';        return $arr;    }    protected function postInsert($arr)    {        $result = parent::postInsert($arr);        return $result;    }    protected function convertUpdate($arr)    {        $arr = parent::convertUpdate($arr);        /*$arr['bd_writer_name'] = Session::getSession('ss_bd_writer_name');        $arr['bd_writer_tel'] = Session::getSession('ss_bd_writer_tel');*/        $arr['bd_state'] = 'W';        $arr['bd_is_secret'] = 'Y';        return $arr;    }    protected function makeDbWhere()    {        $db_where = parent::makeDbWhere();        // 자유게시판 제외한 게시판 본인 게시물만 출력 yllee 180907        global $member;        $mb_id = $member['mb_id'];        $bd_code = $this->get('bd_code');        if ($bd_code != 'free') {            $db_where .= " AND reg_id = '$mb_id' AND bd_state!='C'";        }        $list_mode = $this->get('list_mode');        if ($list_mode == 'classroom') {            $db_where .= " AND bd_category = 'classroom'";        } elseif($list_mode == 'book') {            $db_where .= " AND bd_category = 'book'";        }else{            $db_where .= " AND bd_category = 'homepage'";        }        $this->set('db_where', $db_where);        return $db_where;    }    public function deleteData()    {        $this->initDelete();        $list_uid_arr = $_POST['list_uid'];        $uid = $this->get('uid');        if (!$list_uid_arr && $uid) {            $list_uid_arr = array(                '0' => $uid            );        }        $file_table = $this->get('file_table');        $fi_module = $this->get('fi_module');        for ($i = 0; $i < count($list_uid_arr); $i++) {            $uid = $list_uid_arr[$i];            // 권한 체크            if ($uid && !$this->checkUpdateAuth($uid)) {                $result = array(                    'code' => 'failure',                    'msg' => '권한이 없습니다.'                );                return $result;            }            $data_table = $this->get('data_table');            $pk = $this->get('pk');            if (!Db::update($data_table, "bd_state = 'C'", "WHERE $pk = '$uid'")) {                $result = array(                    'code' => 'failure',                    'msg' => '삭제 과정에 문제가 발생하였습니다.'                );                return $result;            }            $result = array(                'code' => 'success'            );            //$result = $this->deleteRows($uid);            if ($result['code'] != 'success') {                return $result;            }            // 첨부파일 삭제            if ($this->get('max_file')) {                Db::delete($file_table, "WHERE fi_module = '$fi_module' AND fi_uid = '$uid'");                $dir_path = $this->makeUploadDirectory($fi_module, $uid);                File::deleteDirectory($dir_path);            }        }        $list_mode = $_GET['list_mode'];        if ($list_mode == 'classroom' || $list_mode == 'book') {            $this->set('return_uri', './qna_list.html');        }        return $this->postDelete();    }    public function recruitList()    {        $db_where = "WHERE bd_code = 'recruit' AND bd_state = 'P'";        $list = Db::select('tbl_board', '*', $db_where, "", "");        $return = array();        for ($i = 0; $i < count($list); $i++) {            foreach ($list as $key => $value) {                $data = $list[$i]['bd_subject'];                $return[$data] = $list[$i]['bd_id'];            }        }        return $return;    }    // 연수/워크숍 프로그램명(사용자) > 리스트    public function requestList()    {        $db_where = "WHERE bd_code = 'training' AND bd_state = 'P'";        $list = Db::select('tbl_board', '*', $db_where, "", "");        $now_time = date('Y-m-d H:i:s');        $return = array();        for ($i = 0; $i < count($list); $i++) {            // 신청기간, 마감시간 체크 yllee 190507            $s_date = $list[$i]['bd_bgn_date'];            $s_time = $s_date . ' 00:00:00';            $deadline = $list[$i]['bd_etc8'];            $e_date = $list[$i]['bd_end_date'];            $e_time = $e_date . ' ' . $deadline . ':00';            foreach ($list as $key => $value) {                if ($s_time <= $now_time && $e_time >= $now_time) {                    $data = $list[$i]['bd_subject'];                } else {                    $data = $list[$i]['bd_subject'] . '(마감)';                }                $return[$data] = $list[$i]['bd_id'];            }        }        return $return;    }    // 연수/워크숍 프로그램명(사용자) > 게시물 데이터    public function requestData($uid)    {        $db_where = "WHERE bd_id = '$uid'";        $data = Db::selectOnce('tbl_board', '*', $db_where, "", "");        return $data;    }    // 연수/워크숍 프로그램명(사용자) > 마감 제외    public function requestProgressList()    {        $now_time = date('Y-m-d H:i:s');        $now_date = date('Y-m-d');        $now_hour_minute = date('H:i');        $db_where = "WHERE bd_code = 'training' AND bd_state = 'P'";        $db_where .= " AND (bd_bgn_date <= '$now_date' AND bd_end_date >= '$now_date')";        $list = Db::select('tbl_board', '*', $db_where, "", "");        $return = array();        for ($i = 0; $i < count($list); $i++) {            // 신청기간, 마감시간 체크 yllee 190507            $s_date = $list[$i]['bd_bgn_date'];            $s_time = $s_date . ' 00:00:00';            $deadline = $list[$i]['bd_etc8'];            $e_date = $list[$i]['bd_end_date'];            $e_time = $e_date . ' ' . $deadline . ':00';            foreach ($list as $key => $value) {                if ($e_date == $now_date && $deadline >= $now_hour_minute) {                    $data = $list[$i]['bd_subject'];                    $return[$data] = $list[$i]['bd_id'];                } else {                    if ($s_time <= $now_time && $e_time >= $now_time) {                        $data = $list[$i]['bd_subject'];                        $return[$data] = $list[$i]['bd_id'];                    }                }            }        }        return $return;    }    public function insertData()    {        // 권한 체크        if (!$this->checkWriteAuth()) {            $result = array(                'code' => 'failure',                'msg' => '권한이 없습니다.'            );            return $result;        }        $this->initInsert();        $arr = $this->getParameters($this->get('insert_columns'), 'post');        $arr = $this->convertInsert($arr);        $result = $this->validateValues($arr);        if ($result['code'] != 'success') {            return $result;        }        // 1분 안에 재등록 시 잘못된 접근 처리        /*        global $member;        $mb_id = $member['mb_id'];        $reg_time = $arr['reg_time'];        $timestamp = date("Y-m-d H:i:s",strtotime("-1 minutes", strtotime($reg_time)));        $db_where = "WHERE bd_code='qna' AND reg_id='$mb_id' AND reg_time > '$timestamp'";        $bd_data = Db::selectOnce('tbl_board','*', $db_where,"ORDER BY reg_time DESC");        */        $data_table = $this->get('data_table');        //echo $db_where;        //print_r($bd_data);        //echo $data_table;        //print_r($arr);        //exit;        if (Db::insertByArray($data_table, $arr)) {            $result = $this->postInsert($arr);        } else {            $result = array(                'code' => 'failure',                'msg' => '등록 과정에서 장애가 발생하였습니다.'            );        }        return $result;    }}